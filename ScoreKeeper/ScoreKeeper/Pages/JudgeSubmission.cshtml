@page
@model ScoreKeeper.Pages.JudgeSubmissionModel
@{
}
<head>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="https://code.jquery.com/jquery-2.2.4.min.js"
            integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
            crossorigin="anonymous"> </script>
    <style>
        .button {
            display: flex;
            flex-grow: 1;
            flex-direction: column;
            justify-content: space-evenly;
            justify-items: center;
            align-content: center;
            align-items: center;
        }


        .container-submit {
            flex-direction: row;
            display: flex;
            background-color: #102F3B;
            flex-grow: 1;
        }

        .btn-div {
            display: flex;
            flex-direction: row;
            flex-grow: 1;
            margin: 30px;
        }

        .main-window {
            background-color: #102F3B;
        }



        .button-text {
            font-size: 32px;
        }

        .answer-symbol {
            font-size: 128px;
        }

        #checkmark {
            transform: rotate(45deg);
            height: 90px;
            width: 40px;
            margin: 38px;
            border-bottom: 9px solid black;
            border-right: 9px solid black;
        }

        @@media only screen and (max-width: 768px) {
            .container-submit {
                flex-direction: row;
                flex-flow: column wrap;
                display: flex;
                background-color: #102F3B;
                flex-grow: 1;
            }

            .btn-div {
                display: flex;
                flex-direction: row;
                flex-grow: 1;
                margin: 10px;
            }

            .answer-symbol {
                font-size: 64px;
            }

            #checkmark {
                transform: rotate(45deg);
                height: 45px;
                width: 20px;
                margin: 19px;
                border-bottom: 9px solid black;
                border-right: 9px solid black;
            }
        }
    </style>
</head>

<body onload="getGameData();">
    <!--Main section with title and main buttons-->
    <div class="main-window">
        <!--Top buttons section-->
        <div class="header">
            <div class="header-container">
                <div>
                    <button type="button" class="button buttonmed" data-bs-toggle="modal" data-bs-target="#HomeButtonModal">
                        Home
                    </button>
                </div>
                <div style="display:flex; flex-direction:column; align-items:center;">
                    <h2 id="teaminfo" class="display-6">Judge your team's answer</h2>
                    <h2 class="display-6">and submit the result</h2>
                </div>
                <div id="wagerPts"></div>
                <img src="ACSMLogo.png" alt="American College of Sports Medicine Logo" style="background:transparent;width:90px;height:90px;" />
            </div>
        </div>
        <div class="container-submit">
            <div class="btn-div">
                <button type="button" class="button" data-bs-toggle="modal" onclick="showAnsModal('CorrectModal','Correct');">
                    <div class="button-text">Correct</div>
                    <div id="checkmark"></div>
                </button>
            </div>
            <div class="btn-div">
                <button type="button" class="button" data-bs-toggle="modal" onclick="showAnsModal('NoAnswerModal','NA');">
                    <div class="button-text">No Answer</div>
                    <div class="answer-symbol">-</div>
                </button>
            </div>
            <div class="btn-div">
                <button type="button" class="button" data-bs-toggle="modal" onclick="showAnsModal('IncorrectModal','Incorrect');">
                    <div class="button-text">Incorrect</div>
                    <div class="answer-symbol">x</div>
                </button>
            </div>
        </div>
    </div>
</body>


<!-- Home Button Modal -->
<div class="modal fade" id="HomeButtonModal" tabindex="-1" aria-labelledby="HomeButtonModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="HomeButtonModalLabel">Are you sure you want to leave the game?</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="window.location.href='/Index'" class=" btn btn-primary">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Incorrect Button Modal -->
<div class="modal fade" id="IncorrectModal" tabindex="-1" aria-labelledby="IncorrectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="IncorrectModalLabel">The team's answer is INCORRECT</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Add a dropdown list for selecting a team -->
                <label for="teamSelection" class="form-label">Select a team:</label>
                <select class="form-select" id="teamSelectionIncorrect">
                    <!-- Options will be dynamically added here -->
                </select>
            </div>
            <div class="modal-footer" style="justify-content:space-around">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="submitAnswer(0,'Incorrect');" class=" btn btn-primary" data-bs-dismiss="modal">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- No Answer Button Modal -->
<div class="modal fade" id="NoAnswerModal" tabindex="-1" aria-labelledby="NoAnswerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="NoAnswerModalLabel">The team did not submit an answer</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Add a dropdown list for selecting a team -->
                <label for="teamSelection" class="form-label">Select a team:</label>
                <select class="form-select" id="teamSelectionNA">
                    <!-- Options will be dynamically added here -->
                </select>
            </div>
            <div class="modal-footer" style="justify-content:space-around">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="submitAnswer(2,'NA');" class=" btn btn-primary" data-bs-dismiss="modal">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Correct Button Modal -->
<div class="modal fade" id="CorrectModal" tabindex="-1" aria-labelledby="CorrectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="CorrectModalLabel">The team's answer is CORRECT</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Add a dropdown list for selecting a team -->
                <label for="teamSelection" class="form-label">Select a team:</label>
                <select class="form-select" id="teamSelectionCorrect">
                    <!-- Options will be dynamically added here -->
                </select>
            </div>
            <div class="modal-footer" style="justify-content:space-around">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="submitAnswer(1,'Correct');" class=" btn btn-primary" data-bs-dismiss="modal">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!--Final Jeopardy Modal-->
<div class="modal fade" id="FinalJeoModal" tabindex="-1" aria-labelledby="FinalJeoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="JoinGameModalLabel">Final Jeopardy</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="totalPoints"></div>
                <div class="form-group">
                    <label for="final-jeo" class="col-form-label">Points:</label>
                    <input type="number" class="form-control" id="wager" placeholder="Points" min="0">
                    <small id="pointError" class="text-danger"></small> <!-- Error message placeholder -->
                </div>
                <div class="col-sm-4">
                    <small id="passcodeHelp" class="text-danger">
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" onclick="submitFinalJeopardy();" class="btn btn-primary" data-bs-dismiss="modal">Submit</button>
            </div>
        </div>
    </div>
</div>

<script>
    var teamPts = 0;
    const searchParams = new URLSearchParams(window.location.search);
    var sbmt = searchParams.get('sbmt');
    if (sbmt == "-1") {
        var subvals = [-1];
    } else {
        var subvals = sbmt.split(',').map(function (item) {
            return parseInt(item, 10);
        });
    }
    


    function showAnsModal(modaltype, dropcode){
        var myModal = new bootstrap.Modal(document.getElementById(modaltype))
        myModal.show()
        populateTeamDropdown(dropcode);
    }

    function getGameData() {
        var teamname = searchParams.get('teamname');
        var gameid = searchParams.get('gameid');
        var qnum = parseInt(searchParams.get('Q'));
        document.getElementById("teaminfo").innerHTML = "Judge question " + qnum;
        
        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                JSON.stringify(response);
                var games = response;
                games.forEach(function (game) {
                    if (game.id == gameid) {
                        var teams = game.teams;
                        teams.forEach(function (team) {
                            if (teamname == team.teamname) {
                                teamPts = team.score;
                            }
                        });
                        var questions = game.questions;
                        if (qnum == questions.length) {
                            var myModal = new bootstrap.Modal(document.getElementById('FinalJeoModal'));
                            var pointsDiv = document.getElementById('totalPoints');
                            pointsDiv.textContent = 'You have ' + teamPts + ' points to wager';
                            finalJeopardy();
                        }
                    }
                });
            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });

    }

    function getTeams() {
        // Gets the number of teams currently being judged
        var numteams = 0;
        var allTeamsRecorded = false;
        var teams = [];
        var testname;
        while (!allTeamsRecorded) {
            if (numteams == 0) {
                testname = searchParams.get('teamname');
                if (testname) {
                    numteams += 1;
                    teams.push(testname);
                } else {
                    allTeamsRecorded = true;
                }
            } else {
                testname = searchParams.get('teamname' + (numteams + 1));
                if (testname) {
                    numteams += 1;
                    teams.push(testname);
                } else {
                    allTeamsRecorded = true;
                }
            }
        }
        console.log(teams);
        return teams;
    }

    function populateTeamDropdown(selectname) {
        var select = document.getElementById('teamSelection' + selectname);
        select.innerHTML = ''; // Clear existing options first

        // Assuming teams[] is an array of team names
        var teams = getTeams(); // Example array, replace with actual

        // Create and append the options
        for (var i = 0; i < teams.length; i++) {
            var opt = document.createElement('option');
            opt.value = teams[i];
            opt.innerHTML = teams[i];
            if (subvals[i] == -1) {
                select.appendChild(opt);
            }
        }
    }

    function submitAnswer(answerVal, anstype) {
        console.log("submitting answer");
        const teamname = document.getElementById('teamSelection' + anstype).value;
        var teamid;
        var gameid = parseInt(searchParams.get('gameid'));
        var qnum = searchParams.get('Q');
        var questionid;
        var numcorrect = 0;
        var numskipped = 0;
        var nummissed = 0;
        var points = 0;
        var score = 0;
        var correct = 0;
        var incorrect = 0;
        var skipped = 0;
        var ans;
        console.log(teamname);

        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                console.log(response);
                JSON.stringify(response);
                var games = response;
                games.forEach(function (item) {
                    if (item.id === gameid) {
                        item.questions.forEach(function (question) {
                            if (question.title == qnum) {
                                points = question.pointscorrect;
                                questionid = question.id;
                            }
                        });
                        item.teams.forEach(function (team) {
                            if (team.teamname == teamname) {
                                teamid = team.id;
                                nummissed += team.nummissed;
                                numcorrect += team.numcorrect;
                                numskipped += team.numskipped;
                                score += team.score;

                                if (answerVal == 0) {
                                    // Incorrect
                                    nummissed += 1;
                                    score -= points;
                                    incorrect = 1;
                                    ans = 0;
                                } else if (answerVal == 1) {
                                    // Correct
                                    numcorrect += 1;
                                    score += points;
                                    correct = 1;
                                    ans = 1;
                                } else {
                                    //No Answer
                                    numskipped += 1;
                                    skipped = 1;
                                    ans = 2;
                                }
                                changeTeamInfo(gameid, teamname, score, nummissed, numcorrect, numskipped, questionid, teamid, correct, incorrect, skipped, ans, qnum);
                            }
                        });
                    }
                });

            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });




    }

    // Edits team score and number of questions correct/incorrect/skipped
    function changeTeamInfo(gameid, teamname, score, nummissed, numcorrect, numskipped, questionid, teamid, correct, incorrect, skipped, ans, qnum) {
        var teams = getTeams();
        
        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/teams/edit/" + teamid,
            type: 'POST',
            dataType: 'json',
            data: {
                "game_id": gameid,
                "score": score,
                "numcorrect": numcorrect,
                "nummissed": nummissed,
                "numskipped": numskipped
            },
            crossDomain: true,
            success: function (response) {
                var subsFull = false;
                for (var i = 0; i < subvals.length; i++){
                    if (teams[i] == teamname) {
                        subvals[i] = ans;
                        break;
                        console.log(subvals);
                    }
                }
                console.log(subvals)
                if (subvals.includes(-1) == false){
                    finalSubmitAnswer(gameid, teams, questionid, teamid, correct, incorrect, skipped, subvals, qnum);
                }
            },
            error: function (xhr, status, error) {
                console.log("Error: " + error.message);
            }
        });
    }

    function finalSubmitAnswer(gameid, teams, questionid, teamid, correct, incorrect, skipped, ans, qnum) {
        if (teams.length <= 1) {
            var redirect = "/JudgePostSubmission?gameid=" + gameid + "&teamname=" + teams[0] + "&gameid=" + "&Q=" + qnum + "&ans=" + ans;
        } else {
            var redirect = "/JudgePostSubmission?gameid=" + gameid + "&teamname=" + teams[0];
            var counter = 2;
            teams.splice(0, 1);
            teams.forEach(function (team) {
                redirect += "&teamname" + counter + "=" + team;
                counter += 1;
            });
            redirect += "&Q=" + qnum + "&ans=" + ans;
        }
        window.location.assign(redirect);
    }

    function finalJeopardy() {
        try {
            var myModal = new bootstrap.Modal(document.getElementById('FinalJeoModal'));
            myModal.show();
        } catch (error) {
            console.error("Error hiding modal:", error);
        }
    }

    function submitFinalJeopardy() {
        var wagerVal = parseInt(document.getElementById("wager").value);

        var pointError = document.getElementById("pointError");

        if (isNaN(wagerVal) || wagerVal < 0) {
            pointError.textContent = "Please enter a valid positive number.";
        } else if (wagerVal > teamPts) {
            pointError.textContent = "You cannot wager more points than your team currently has.";
        } else {
            pointError.textContent = ""; // Clear error message if input is valid
            var wagerVal = document.getElementById("wager").value;
            var wagerDiv = document.getElementById('wagerPts');


            wagerDiv.textContent = 'Points Wagered ' + wagerVal;
            


        }
    }
</script>