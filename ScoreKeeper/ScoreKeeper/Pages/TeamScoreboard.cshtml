@page
@model ScoreKeeper.Pages.TeamScoreboardModel
@{
    ViewData["Title"] = "TeamScoreboard";
}

<head>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        .main-window {
            background-color: #102F3B;
        }

        table {
            border-collapse: collapse;
        }

        th,
        td {
            background-color: white;
            border: 1px solid #aaa;
            padding: 5px;
            text-align: left;
        }
    </style>
    <script src="https://code.jquery.com/jquery-2.2.4.min.js"
            integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
            crossorigin="anonymous"></script>
</head>

<body onload="getGameData(); displayLeaderboard();">
    <!--Main section with title and main buttons-->
    <div class="main-window">

        <!--Top buttons section-->
        <div class="header">
            <div class="header-container">
                <div>
                    <button type="button" class="button buttonmed" data-bs-toggle="modal" data-bs-target="#HomeButtonModal">
                        Home
                    </button>
                    <button type="button" class="button buttonmed" onclick="returnToScoreboard()">
                        Back to scoreboard
                    </button>

                </div>
                <h1 class="display-4" id="headerTitle"></h1>
                <img src="~/ACSMLogo.png" alt="American College of Sports Medicine Logo" style="background:transparent;width:90px;height:90px;" />
            </div>
        </div>

        <table id="scoreboardID">
            <tr>
                <th>Question</th>
                <th>Points</th>
                <th>Answer</th>
            </tr>
            <tbody id="scoreboardContent">
            </tbody>
        </table>
        <div id = "finePrint" style=" text-align: center; color: white; font-weight: bold;">
            Questions in which the team did not participate do not appear on this scoreboard
        </div>
        <div id="emptyAnswers" style=" text-align: left; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); color: white; font-weight: bold;">
        </div>


    </div>



</body>
<!-- Home Button Modal -->
<div class="modal fade" id="HomeButtonModal" tabindex="-1" aria-labelledby="HomeButtonModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content modal">
            <!-- Add the 'modal' class here -->
            <div class="modal-header d-flex justify-content-center position-relative">
                <h1 class="modal-title fs-5" id="HomeButtonModalLabel">Leave Game</h1>
                <div class="logo position-absolute end-0" style="height: 90%;"></div>
            </div>
            <div class="modal-body text-center">
                <!-- Added text in the center of the window -->
                <p>
                    Are you sure you want to go back to the home page?
                </p>
                <p>
                    You will leave the game.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="window.location.href='/Index'" class="btn btn-submit">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>// Sets the title of the page
    function getGameData() {
        const searchParams = new URLSearchParams(window.location.search);
        var gamecode = searchParams.get('Scorecode');
        var teamName = searchParams.get('teamname');


        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                JSON.stringify(response);
                var games = response;
                games.forEach(function (item) {
                    if (item.gamecode === gamecode) {
                        item.teams.forEach(function (team) {
                            if (team.teamname == teamName) {
                                document.getElementById('headerTitle').textContent ="Team: "+ team.teamname + " Total Score: " + team.score;

                            }
                        });
                    }
                });

            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });
    }

    // Creates and sorts the leaderboard

    function displayLeaderboard() {
        var scoreExport = '';
        var qNum = 1;
        const searchParams = new URLSearchParams(window.location.search);
        var gamecode = searchParams.get('Scorecode');
        var teamName = searchParams.get('teamname');
        var scoreTeam;
        var questions;

        var test = "";

        var teams = null;

        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                JSON.stringify(response);
                var games = response;
                //Iterate through each game to find correct game
                games.forEach(function (game) {
                    if (game.gamecode == gamecode) {

                        questions = game.questions;
                        //find correct team
                        game.teams.forEach(function (team) {
                            if (team.teamname == teamName) {
                                scoreTeam = team;
                                team.answers.forEach(function (answer) {
                                    console.log(answer);
                                    if (answer.correct == null && answer.incorrect == null && answer.skipped == null) {
                                        scoreExport += '<tr><td>' + qNum + '</td><td>' + question.pointscorrect + '</td><td>' + "Did not participate (+0)" + '</td></tr>';
                                        test += "DNP ";

                                    }
                                    else if (answer.correct == 1) {
                                        scoreExport += '<tr><td>' + qNum + '</td><td>' + questions[qNum - 1].pointscorrect + '</td><td>' + "Correct (+" + questions[qNum - 1].pointscorrect + ")" + '</td></tr>';
                                        test += "Correct ";
                                    }
                                    else if (answer.correct == 0 && answer.skipped == 0) {
                                        scoreExport += '<tr><td>' + qNum + '</td><td>' + questions[qNum - 1].pointscorrect + '</td><td>' + "Inocorrect (-" + questions[qNum - 1].pointscorrect + ")" + '</td></tr>';
                                        test += "Incorrect ";
                                    }
                                    else if (answer.skipped == 1) {
                                        scoreExport += '<tr><td>' + qNum + '</td><td>' + questions[qNum - 1].pointscorrect + '</td><td>' + "Did not answer (+0)" + '</td></tr>';
                                        test += "DNA";
                                    }
                                    qNum++;
                                    console.log(qNum);
                                    console.log(scoreExport);
                                    console.log(test);
                                });
                            }
                        });
                    }
                });
                if (scoreExport == "") {
                    document.getElementById("scoreboardID").style.display = 'none';
                    document.getElementById("finePrint").style.display = 'none';
                    document.getElementById("emptyAnswers").textContent = "No questions were answered this game";


                }
                else {
                    document.getElementById("scoreboardContent").innerHTML = scoreExport;

                }
                console.log(scoreExport);
            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });

    }
    function returnToScoreboard(){
        const searchParams = new URLSearchParams(window.location.search);
        var gamecode = searchParams.get('Scorecode');
        var url = "/Scoreboard?gamecode=" + gamecode;
        window.location.assign(url);
    }
    </script>