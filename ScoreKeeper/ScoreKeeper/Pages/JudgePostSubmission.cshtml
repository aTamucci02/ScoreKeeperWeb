@page
@model ScoreKeeper.Pages.JudgePostSubmissionModel
@{
}
<head>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>


        .main-window {
            background-color: #102F3B;
            color: white;
            font-size: 2.5vw;
        }


        .vert-container {
            flex-direction: column;
            display: flex;
            flex-grow: 1;
            align-items: center;
            justify-content: space-evenly;
            margin-top: 10vh;
        }

        .request-change {
            font-size: 2.3vw;
            display: flex;
            flex-direction: column;
            flex-grow: 2;
            align-items: center;
        }
        .button{
            font-size: 2.3vw; 
            margin-top: 15px;
        }

        .display-6 {
            font-size: 3vw;
            
        }

        .ansclass {
            font-size: 2vw;
            font-weight: normal;
        }

        @@media only screen and (max-width: 768px) {
            .main-window {
                background-color: #102F3B;
                color: white;
                font-size: 4vw;
            }

            .request-change {
                font-size: 3.5vw;
                display: flex;
                flex-direction: column;
                flex-grow: 2;
                align-items: center;
            }

            .button {
                font-size: 3.5vw;
                margin-top: 15px;
            }

            .display-6 {
                font-size: 3.5vw;
            }

            .ansclass {
                font-size: 2.5vw;
                font-weight: normal;
            }
        }

        

    </style>
    <script src="https://code.jquery.com/jquery-2.2.4.min.js"
            integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
            crossorigin="anonymous"></script>
</head>

<body onload="getAns();">
    <!--Main section with title and main buttons-->
    <div class="main-window">
        <div class="header">
            <div class="header-container">
                <div>
                    <button type="button" class="button buttonmed" data-bs-toggle="modal" data-bs-target="#HomeButtonModal">
                        Home
                    </button>
                </div>
                <div style="display:flex; flex-direction:column; align-items:center; margin-left:1vw;">
                    <h2 class="display-6" id="answer">Answers submitted</h2>
                </div>
                <div style="display:flex; flex-direction:column; align-items:start;" id="listOfAns">
                    
                </div>
                <img src="ACSMLogo.png" alt="American College of Sports Medicine Logo" style="background:transparent;width:90px;height:90px;" />
            </div>
        </div>

        <div @* class="vert-container *@align="center">
            <div style="flex-grow:1;">The next question will begin shortly</div>
            <div id="answersSub"></div>

            <br />

            <div align="center" id="output-container">
            </div>

            <br />
            <br />
            <div class="request-change">
                <div>Want to change your submission?</div>
                <div>
                    <button type="button" class="button buttonmed" data-bs-toggle="modal" onclick="showAnsModal();">
                        Change Submission
                    </button>
                </div>

            </div>

        </div>
    </div>
</body>



<!-- Home Button Modal -->
<div class="modal fade" id="HomeButtonModal" tabindex="-1" aria-labelledby="HomeButtonModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="HomeButtonModalLabel">Are you sure you want to leave the game?</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" onclick="window.location.href='/Index'" class=" btn btn-primary">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Request Change Button Modal -->
<div class="modal fade" id="RequestChangeModal" tabindex="-1" aria-labelledby="RequestChangeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="RequestChangeModalLabel">Change Submission</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Add a dropdown list for selecting a team -->
                <label for="teamSelection" class="form-label">Select a team:</label>
                <select class="form-select" id="teamSelection">
                    <!-- Options will be dynamically added here -->
                </select>
                <p>What would you like to change your submission to?</p>

                <select name="submission" id="submission">
                    <option disabled selected value="blank"> -- select an option -- </option>
                    <option value="0">Incorrect</option>
                    <option value="2">No Answer</option>
                    <option value="1">Correct</option>
                </select>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class=" btn btn-primary" id="submit" onclick="submitChange();" data-bs-dismiss="modal" disabled>Submit</button>
            </div>
        </div>
    </div>
</div>

<script>
    const select = document.getElementById('submission');
    const teamSelect = document.getElementById('teamSelection');
    const submitButton = document.getElementById('submit');
    const searchParams = new URLSearchParams(window.location.search);
    const teams = getTeams();
    var teamname = searchParams.get('teamname');
    var teamnum = 0;
    var gameid = parseInt(searchParams.get('gameid'));
    var qnum = searchParams.get('Q');
    var sbmt = searchParams.get('ans');
    var ans = sbmt[teamnum];
    if (sbmt == "-1") {
        var subvals = [-1];
    } else {
        var subvals = sbmt.split(',').map(function (item) {
            return parseInt(item, 10);
        });
    }

    document.getElementById('teamSelection').addEventListener('change', () => {
        teamname = teamSelect.value;
        teamnum = teams.indexOf(teamname);
    });

    // document.getElementById('RequestChangeModalLabel').innerHTML = "You submitted " + getAns();
    document.getElementById('submission').addEventListener('change', () => {
        if (select.value === 'blank' || select.value.toUpperCase() == subvals[teamnum]) {
            submitButton.disabled = true;
        } else {
            submitButton.disabled = false;
        }
    });
    setInterval(checkNextQ, 5000);
    setInterval(displayPodium, 10000);

    function showAnsModal() {
        var myModal = new bootstrap.Modal(document.getElementById('RequestChangeModal'));
        myModal.show();
        populateTeamDropdown();
    }

    function populateTeamDropdown() {
        
        teamSelect.innerHTML = ''; // Clear existing options first

        // Create and append the options
        for (var i = 0; i < teams.length; i++) {
            var opt = document.createElement('option');
            opt.value = teams[i];
            opt.innerHTML = teams[i];
            teamSelect.appendChild(opt);
            
        }
        
    }

    function checkNextQ() {
        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                JSON.stringify(response);
                var games = response;
                games.forEach(function (item) {
                    if (item.id === parseInt(gameid)) {
                        if (item.description == "end") {
                            window.location.assign("/GameOverPage?&teamname=" + teamname + "&gameid=" + gameid);
                        } else if (item.description != qnum && item.description != null) {
                            window.location.assign("/JudgeSubmission?&teamname=" + teamname + "&gameid=" + gameid + "&Q=" + item.description);
                        }
                    }
                });

            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });
    }

    function getTeams() {
        // Gets the number of teams currently being judged
        var numteams = 0;
        var allTeamsRecorded = false;
        var teamstemp = [];
        var testname;
        while (!allTeamsRecorded) {
            if (numteams == 0) {
                testname = searchParams.get('teamname');
                if (testname) {
                    numteams += 1;
                    teamstemp.push(testname);
                } else {
                    allTeamsRecorded = true;
                }
            } else {
                testname = searchParams.get('teamname' + (numteams + 1));
                if (testname) {
                    numteams += 1;
                    teamstemp.push(testname);
                } else {
                    allTeamsRecorded = true;
                }
            }
        }
        console.log(teamstemp);
        return teamstemp;
    }

    function getAns() {
        displayPodium();
        var answer;
        var ansHeader = document.getElementById('listOfAns');

        for (var i = 0; i < teams.length; i++) {
            var ansEntry = document.createElement('h2');
            ansEntry.classList.add("ansclass");
            if (subvals[i] == 0) {
                answer = "INCORRECT";
            } else if (subvals[i] == 1) {
                answer = "CORRECT";
            } else {
                answer = "NO ANSWER";
            }
            console.log(teams[i] + " Answer: " + answer)
            ansEntry.innerHTML = teams[i] + ": " + answer;
            ansHeader.appendChild(ansEntry);
        }
        document.getElementById("answer").innerHTML = "Answers submitted for question " + qnum;
    }

    function submitChange() {
        var teamid;
        var questionid;
        var numcorrect = 0;
        var numskipped = 0;
        var nummissed = 0;
        var points = 0;
        var score = 0;
        var correct = 0;
        var incorrect = 0;
        var skipped = 0;
        var newAns = select.value;
        var answerVal = parseInt(newAns);
        ans = sbmt[teamnum];


        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                JSON.stringify(response);
                var games = response;
                games.forEach(function (item) {
                    if (item.id === gameid) {
                        item.questions.forEach(function (question) {
                            if (question.title == qnum) {
                                points = question.pointscorrect;
                                questionid = question.id;
                            }
                        });
                        item.teams.forEach(function (team) {
                            if (team.teamname == teamname) {
                                teamid = team.id;
                                nummissed += team.nummissed;
                                numcorrect += team.numcorrect;
                                numskipped += team.numskipped;
                                score += team.score;

                                // Removes the old answer and points
                                if (parseInt(ans) == 0) {
                                    // Incorrect
                                    nummissed -= 1;
                                    score += points;
                                    deleteOldAnswerRequest(questionid, teamid);
                                } else if (parseInt(ans) == 1) {
                                    // Correct
                                    numcorrect -= 1;
                                    score -= points;
                                    deleteOldAnswerRequest(questionid, teamid);
                                } else {
                                    //No Answer
                                    numskipped -= 1;
                                    deleteOldAnswerRequest(questionid, teamid);
                                }


                                // Adds the new answer
                                if (answerVal == 0) {
                                    // Incorrect
                                    nummissed += 1;
                                    score -= points;
                                    incorrect = 1;
                                    changeTeamInfo(gameid, teamname, score, nummissed, numcorrect, numskipped, questionid, teamid, correct, incorrect, skipped, newAns, qnum);
                                } else if (answerVal == 1) {
                                    // Correct
                                    numcorrect += 1;
                                    score += points;
                                    correct = 1;
                                    changeTeamInfo(gameid, teamname, score, nummissed, numcorrect, numskipped, questionid, teamid, correct, incorrect, skipped, newAns, qnum);
                                } else {
                                    //No Answer
                                    numskipped += 1;
                                    skipped = 1;
                                    changeTeamInfo(gameid, teamname, score, nummissed, numcorrect, numskipped, questionid, teamid, correct, incorrect, skipped, newAns, qnum);
                                }

                            }
                        });
                    }
                });

            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });

    }

    function changeTeamInfo(gameid, teamname, score, nummissed, numcorrect, numskipped, questionid, teamid, correct, incorrect, skipped, ans, qnum) {
        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/teams/edit/" + teamid,
            type: 'POST',
            dataType: 'json',
            data: {
                "game_id": gameid,
                "score": score,
                "numcorrect": numcorrect,
                "nummissed": nummissed,
                "numskipped": numskipped
            },
            crossDomain: true,
            success: function (response) {
                finalSubmitAnswer(gameid, questionid, ans, qnum);
            },
            error: function (xhr, status, error) {
                console.log("Error: " + error.message);
            }
        });
    }

    function finalSubmitAnswer(gameid, questionid, ans, qnum) {
        subvals[teamnum] = ans;
        if (teams.length <= 1) {
            var redirect = "/JudgePostSubmission?gameid=" + gameid + "&teamname=" + teams[0] + "&gameid=" + "&Q=" + qnum + "&ans=" + ans;
        } else {
            var redirect = "/JudgePostSubmission?gameid=" + gameid + "&teamname=" + teams[0];
            var counter = 2;
            teams.splice(0, 1);
            teams.forEach(function (team) {
                redirect += "&teamname" + counter + "=" + team;
                counter += 1;
            });
            redirect += "&Q=" + qnum + "&ans=" + subvals;
        }
        window.location.assign(redirect);
    }

    function deleteOldAnswerRequest(questionid, teamid) {
        var answerid;
        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/teams/" + teamid,
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                console.log(response);
                JSON.stringify(response);
                var team = response;
                team.answers.forEach(function (answer) {
                    if (answer.team_id == teamid && answer.question_id == questionid) {
                        answerid = answer.id;
                        deleteOldAnswer(answerid);
                    }
                });
            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }
        });
    }
    function deleteOldAnswer(answerid) {
        var answerid;
        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/answers/delete/" + answerid,
            type: 'POST',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                console.log("successfully deleted answer");
            },
            error: function (xhr, status, error) {

                console.log("Error: " + error.message);
            }

        });
    }

    function displayPodium() {
        const searchParams = new URLSearchParams(window.location.search);
        var teams;

        var scoreExport = '<div>Leaderboard:</div>';
        var rank = 1;
        var numofties = 0;
        var prevscore = 0;


        $.ajax({
            url: "https://csdev.samford.edu/gamesapi/games/list",
            type: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            success: function (response) {
                JSON.stringify(response);
                var games = response;
                console.log(response);
                games.forEach(function (item) {
                    if (item.id === gameid) {
                        console.log("team found");
                        teams = item.teams;
                    }
                });

                // Sorts each team in descending order of score
                teams.sort((team1, team2) => team2.score - team1.score);
                teams.forEach(function (team) {
                    // Checks if you're testing the first team
                    if (rank == 1) {
                        prevscore = team.score;
                    } else {
                        if (team.score == prevscore) {
                            numofties += 1;
                        } else {
                            numofties = 0;
                        }
                        prevscore = team.score;
                    }
                    if (rank <= 3 || team.teamname == teamname) {
                        // Creates inner HTML for scoreboard with the rank corrected for ties
                        scoreExport += '<div>' + (rank - numofties) + '. ' + team.teamname + ' with ' + team.score + ' points';
                    }
                    rank += 1;
                });
                document.getElementById("output-container").innerHTML = scoreExport;
            },
            error: function (xhr, status, error) {
                console.log("Error: " + error.message);
            }
        });



    }

</script>